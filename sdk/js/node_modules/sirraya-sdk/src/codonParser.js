class CodonParser {
    constructor(codon) {
        this.codon = codon;
        this.components = this.parseCodon(codon);
    }

    parseCodon(codon) {
        const components = codon.split('-');
        if (components.length !== 7) {
            throw new Error("Invalid Codon format");
        }
        return {
            identity: components[0],
            role: components[1],
            intent: components[2],
            context: components[3],
            time: components[4],
            geo: components[5],
            signature: components[6]
        };
    }

    encode() {
        const { identity, role, intent, context, time, geo, signature } = this.components;
        return `${identity}-${role}-${intent}-${context}-${time}-${geo}-${signature}`;
    }

    getIdentity() { return this.components.identity; }
    getRole() { return this.components.role; }
    getIntent() { return this.components.intent; }
    getContext() { return this.components.context; }
    getTime() { return this.components.time; }
    getGeo() { return this.components.geo; }
    getSignature() { return this.components.signature; }
}

module.exports = CodonParser;
